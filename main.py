import json
import glob
import os
import pandas as pd

def format_hms(total_seconds: float) -> str:
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Ä—è–¥–æ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ HHh MMm SSs."""
    total_seconds = int(total_seconds)
    hours = total_seconds // 3600
    minutes = (total_seconds % 3600) // 60
    seconds = total_seconds % 60
    return f"{hours:02d}h {minutes:02d}m {seconds:02d}s"

def process_spotify_data(file_pattern: str):
    # 1) –ü–æ–∫–∞–∑–∞—Ç–∏, —è–∫—ñ —Ñ–∞–π–ª–∏ –∑–Ω–∞–π–¥–µ–Ω–æ
    files = glob.glob(file_pattern)
    print("üîç –ó–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–∏:", files)
    if not files:
        print("üìÇ –í–º—ñ—Å—Ç –ø–æ—Ç–æ—á–Ω–æ—ó —Ç–µ–∫–∏:", os.listdir('.'))
        raise FileNotFoundError(f"–ñ–æ–¥–µ–Ω —Ñ–∞–π–ª –∑–∞ —à–∞–±–ª–æ–Ω–æ–º '{file_pattern}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    data = []
    for file in files:
        with open(file, 'r', encoding='utf-8') as f:
            content = json.load(f)
            sample = content[0] if isinstance(content, list) else content
            print(f"üóíÔ∏è –ö–ª—é—á—ñ –≤ '{file}':", list(sample.keys()))
            if isinstance(content, dict):
                data.append(content)
            elif isinstance(content, list):
                data.extend(content)
    
    df = pd.DataFrame(data)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ ts
    if 'ts' not in df.columns:
        print("‚ùå –£—Å—ñ –∫–æ–ª–æ–Ω–∫–∏ —É DataFrame:", df.columns.tolist())
        raise KeyError("–£ –¥–∞–Ω–∏—Ö –Ω–µ–º–∞—î –ø–æ–ª—è 'ts'")
    
    # –û—Å–Ω–æ–≤–Ω–∞ –æ–±—Ä–æ–±–∫–∞
    df['ts'] = pd.to_datetime(df['ts'])
    df['year'] = df['ts'].dt.year
    
    # –î–æ–¥–∞—î–º–æ seconds_played (ms_played –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ–º)
    df['ms_played'] = df.get('ms_played', 0)
    df['seconds_played'] = df['ms_played'] / 1000.0
    
    # –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è
    total_seconds = df['seconds_played'].sum()
    
    # –ß–∞—Å –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è –ø–æ —Ä–æ–∫–∞—Ö
    sec_per_year = df.groupby('year')['seconds_played'].sum().reset_index()
    
    # –¢–æ–ø 5 —Ç—Ä–µ–∫—ñ–≤ –∑–∞ —Å–µ–∫—É–Ω–¥–∞–º–∏ –ø–æ —Ä–æ–∫—É
    top5_per_year = (
        df.groupby(['year', 'master_metadata_track_name'])['seconds_played']
          .sum().reset_index()
          .sort_values(['year', 'seconds_played'], ascending=[True, False])
          .groupby('year').head(5)
    )
    
    # –¢–æ–ø 10 —Ç—Ä–µ–∫—ñ–≤ –∑–∞ –≤–µ—Å—å —á–∞—Å
    top10_overall = (
        df.groupby('master_metadata_track_name')['seconds_played']
          .sum().reset_index()
          .sort_values('seconds_played', ascending=False)
          .head(10)
    )
    
    return total_seconds, sec_per_year, top5_per_year, top10_overall

if __name__ == "__main__":
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —à–∞–±–ª–æ–Ω *.json
    total_seconds, sec_per_year, top5_per_year, top10_overall = process_spotify_data('*.json')
    
    # –í–∏–≤—ñ–¥ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —á–∞—Å—É
    print(f"\n‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ! –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è: {format_hms(total_seconds)}\n")
    
    # –í–∏–≤—ñ–¥ –ø–æ —Ä–æ–∫–∞—Ö
    print("–ß–∞—Å –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è –ø–æ —Ä–æ–∫–∞—Ö:")
    for _, row in sec_per_year.iterrows():
        print(f"{int(row['year'])}: {format_hms(row['seconds_played'])}")
    
    # –¢–æ–ø‚Äë5 —Ç—Ä–µ–∫—ñ–≤ –∑–∞ —Ä—ñ–∫
    print("\n–¢–æ–ø‚Äë5 —Ç—Ä–µ–∫—ñ–≤ –∑–∞ —á–∞—Å–æ–º –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è —É –∫–æ–∂–Ω–æ–º—É —Ä–æ—Ü—ñ:")
    for year in sorted(sec_per_year['year']):
        print(f"\n{int(year)}:")
        subset = top5_per_year[top5_per_year['year'] == year]
        for _, r in subset.iterrows():
            name = r['master_metadata_track_name']
            secs = r['seconds_played']
            print(f"  {name}: {format_hms(secs)}")
    
    # –¢–æ–ø‚Äë10 —Ç—Ä–µ–∫—ñ–≤ –∑–∞ –≤–µ—Å—å —á–∞—Å
    print("\n–¢–æ–ø‚Äë10 —Ç—Ä–µ–∫—ñ–≤ –∑–∞ –≤–µ—Å—å —á–∞—Å:")
    for _, r in top10_overall.iterrows():
        name = r['master_metadata_track_name']
        secs = r['seconds_played']
        print(f"  {name}: {format_hms(secs)}")
